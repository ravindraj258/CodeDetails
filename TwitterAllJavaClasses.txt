Request Token:
package com.cisco.twitter.requestToken;

import java.util.ArrayList;
import java.util.List;
import twitter4j.Twitter;
import twitter4j.TwitterFactory;
import twitter4j.auth.RequestToken;
import twitter4j.conf.ConfigurationBuilder;

public class TwitterRequestToken {

	public List<String> requestToken(String key, String keysecret, String userId, String redirectUrl) {
		List<String> l = new ArrayList<String>();

		ConfigurationBuilder cb = new ConfigurationBuilder();
		cb.setDebugEnabled(true).setOAuthConsumerKey(key).setOAuthConsumerSecret(keysecret);

		TwitterFactory tf = new TwitterFactory(cb.build());
		Twitter twitter = tf.getInstance();

		try {
			RequestToken requestToken = twitter.getOAuthRequestToken(redirectUrl);
			System.out.println(requestToken.getAuthenticationURL());
			System.out.println(twitter.getAuthorization());

			l.add(requestToken.getToken());
			l.add(requestToken.getTokenSecret());
			l.add(requestToken.getAuthorizationURL());
			l.add(requestToken.getAuthenticationURL());

			TwitterUtil util = new TwitterUtil();
			util.storeRequestToken(requestToken, twitter, userId);

		} catch (Exception e) {

			e.printStackTrace();
		}

		return l;

	}

}
=============
TokenBean
package com.cisco.twitter.requestToken;

import twitter4j.Twitter;
import twitter4j.auth.RequestToken;

public class TokenBean {

	private RequestToken requestToken;
	private long time;
	private Twitter twitter;
	private String userId;

	public TokenBean(RequestToken requestToken, long time, Twitter twitter, String userId) {
		super();
		this.requestToken = requestToken;
		this.time = time;
		this.twitter = twitter;
		this.setUserId(userId);
	}

	public RequestToken getRequestToken() {
		return requestToken;
	}

	public void setRequestToken(RequestToken requestToken) {
		this.requestToken = requestToken;
	}

	public long getTime() {
		return time;
	}

	public void setTime(long time) {
		this.time = time;
	}

	@Override
	public String toString() {
		return "userId [userId=" + userId + ",requestToken= " + requestToken + ", time=" + time + "]";
	}

	public Twitter getTwitter() {
		return twitter;
	}

	public void setTwitter(Twitter twitter) {
		this.twitter = twitter;
	}

	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

}
==============
Twitter Util Class
package com.cisco.twitter.requestToken;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import twitter4j.Twitter;
import twitter4j.auth.RequestToken;

public class TwitterUtil {

	public static Map<String, TokenBean> requestTokenMap = new HashMap<String, TokenBean>();

	public void storeRequestToken(RequestToken requestToken, Twitter twitter, String userId) {
		TokenBean tokenBean = new TokenBean(requestToken, System.currentTimeMillis(), twitter, userId);
		requestTokenMap.put(userId, tokenBean);

	}

	public TokenBean getTokenBean(String userId) {

		TokenBean tokenBean = requestTokenMap.get(userId);

		removeRequestTokens(userId);

		return tokenBean;
	}

	private void removeRequestTokens(String userId) {
		requestTokenMap.remove(userId);
		try {
			Set<String> keys = requestTokenMap.keySet();
			if (keys != null) {
				for (String key : keys) {
					TokenBean tokenBean = requestTokenMap.get(key);
					long beanTime = tokenBean.getTime();
					long currentTime = System.currentTimeMillis();
					if (beanTime < currentTime - (1000 * 60 * 60)) {
						requestTokenMap.remove(key);
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

}
=============
TwitterAccessToken
package com.cisco.twitter.requestToken;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import twitter4j.Twitter;
import twitter4j.TwitterFactory;
import twitter4j.auth.AccessToken;
import twitter4j.auth.RequestToken;
import twitter4j.conf.ConfigurationBuilder;

public class TwitterAccessToken {

	TwitterUtil util = new TwitterUtil();

	public List<String> accessToken(String key, String keysecret, String oauthVerifier, String userId)
			throws IOException {
		List<String> l = new ArrayList<String>();
		try {
			System.out.println("key" + key);
			System.out.println("secret" + keysecret);
			System.out.println("url is" + userId);

			System.out.println("verfier value is" + oauthVerifier);
			AccessToken accessToken = null;

			TokenBean tokenBean = util.getTokenBean(userId);
			System.out.println("TokenBean " + tokenBean.toString());

			Twitter twitter = tokenBean.getTwitter();
			accessToken = twitter.getOAuthAccessToken(tokenBean.getRequestToken(), oauthVerifier);

			System.out.println("Token " + accessToken.getToken());
			System.out.println("TokenSecret" + accessToken.getTokenSecret());
			l.add(accessToken.getToken());
			l.add(accessToken.getTokenSecret());
			l.add(accessToken.getScreenName());
			l.add(String.valueOf(accessToken.getUserId()));
		} catch (Exception e) {

			e.printStackTrace();
		}
		return l;

	}

	public static String printRequest(String userId) {

		return TwitterUtil.requestTokenMap.toString();
	}

}

